---
domain: D09
module: M1
title: Introduktion till referenser
layout: module
quiz: Q1
links:
    - title: "C++ references"
      url: "http://www.tutorialspoint.com/cplusplus/cpp_references.htm"
---

# Introduktion till referenser 

Referenserna fungera som in- och ut-parameter, det vill säga att objektet som kommer in i funktionen ändras parmament även utanför.

Skickar man ett objekt som värde istället för referens (eller pekare) till en funktion, kommer en kopia av objektet att skapas som man då istället ändrar på.

__Kodexempel A__

{% highlight c++ linenos %}
void Func(int as_value, int& as_ref) {
    as_value = 10;
    as_ref = 10;
}

int main() {
    int a = 5,
        b = 20;

    Func(a, b);
    // a är fortfarande 5
    // b ändras och är nu 10
}
{% endhighlight %}

Referenser nyttjas ofta som funktionsparametrar när en funktion ska kunna returnera flera värden. En funktions retur-anrop kan endast returnera ett objekt, och man vill flera gånger kunna returnera flera olika objekt.

I kodexempel B fungerar den tredje funktionsparametern för Divide som en in- och ut-parameter för resultatet av x/y. Returtypen för Divide är en bool, som returnerar false om man försöker dela med noll.

__Kodexempel B__

{% highlight c++ linenos %}
#include <iostream>
using namespace std;

bool Divide(int x, int y, int& result) {
    if (y == 0) {
        cout << "You cannot divide by zero!" << endl;
        return false;
    } else {
        result = x / y;
    }

    return true;
}

void PrintResult(int x, int y, int result) {
    cout << x << "/" << y << " = " << result << endl;
}

int main() {
    int x = 10,
        y = 0,
        z = 2,
        result = 0;

    if (Divide(x, y, result)) {
        // Divide returnerar false, PrintResult exekveras ej.
        PrintResult(x, y, result);
    }

    if (Divide(x, z, result)) {
        // Divide returnerar true, PrintResult exekveras.
        PrintResult(x, z, result);
    }
}
{% endhighlight %}

__Utskrift:__ 

{% highlight jinja %}
You cannot divide by zero!
10/2 = 5
{% endhighlight %}


### Övningsuppgift 1

En funktion som multiplicerar ett tal med sig självt ser ut såhär:

{% highlight c++ linenos %}
void Multiply(int value) {
    value = value * value;
}
{% endhighlight %}

Vad blir värdet för talet `i` efter den här operationen:

{% highlight c++ linenos %}
int i = 3;
Multiply(i);

{%endhighlight%}
####Svar:
MelMelon
i = 3. För att värdet kopieras eftersom att det inte är en referens.
{: .spoiler}

###Övningsuppgift 2
Skriv om funktionen i Övningsuppgift 1 så att parametern “value” är en referens. Vad blir resultatet nu?

####Svar:

{% highlight c++ linenos %}
void Multiply(int& value) {
    value = value * value;
}
{% endhighlight %}
<br>
`i` får värdet 9 efter operationen.
{: .spoiler}

### Övningsuppgift 3

Funktionen `GetName()` ser ut såhär:

{% highlight c++ linenos %}
std::string& GetName() {

    std::string res = "Allan";
    return res;
}
{% endhighlight %}

Funktionen returnerar en referens till en sträng. Vad händer när följande operation körs och varför?

std::string myName = GetName();

####Svar:

Programmet kompilerar men crashar under runtime. Detta för att res försvinner när GetName() går ut ur scope medan myName fortfarande refererar till objektet.
{: .spoiler}

### Kommentar

* Det är likvärdigt att nyttja en pekare istället för en referens som funktionsparameter. Resultatet blir detsamma! 
* Skulle man behöva skicka in någonting stort som inparameter bör man skicka det som referens, då sker ingen kopiering. 
* Man kan returnera flera värden/objekt från en funktion genom att returnera en struct eller en klass.
